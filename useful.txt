터미널 단축키
	cd ./[디렉토리명] 현재 디렉토리에서 하위 디렉토리로 이동
	cd ~/ 최상위 디렉토리(home)로 이동
	cd .. 한단계 상위 디겍토리로 이동
	tree 파일 한번에 볼 수 (설치 필요)
	mkdir [디렉토리] 해당 경로에 새로운 디렉토리 만들기
	touch [파일.확장자명] 해당 경로에 새로운 파일 만들기
	rm -rf [디렉토리/파일] 지우기(복구 불가, force)



단축키 설정 파일 실행(gedit 프로그램으로 실행)
	gedit ~/.bashrc 후 source ~/.bashrc

	alias ss='source install/setup.bash'
	alias cb='colcon build'
	
	source /opt/ros/foxy/setup.bash ros2 setup.bash 추가(.bashrc 파일에서 맨 아래에 추가하여 항상 실행되게 할 수 있음)



패키지 관리
	sudo apt-get update 업데이트 가능한 패키지 정보 받아오기
	sudo apt-get install [패키지 이름] 패키지 설치(update 다음 실행 가능)
	
	sudo apt --installed list --[추가 명령어] 설치된 패키지 리스트
	sudo apt-get --purge remove [패키지 이름]
	

ros2 패키지 생성 (src 디렉토리)
	ros2 pkg create [패키지 이름 ex)my_package] --build-type [빌드 타입 ex)ament_python] --dependencies [의존 패키지1 ex)rclpy] [의존 패키지2 ex)std_msgs]

	or

	package.xml 파일에서
	<exec_depend>rclpy</exec_depend>
	<exec_depend>std_msgs</exec_depend>
	삽입

ros2 빌드
	source install/setup.bash
	colcon build (--packages-select[패키지 이름])<-특정 패키지만 빌드할 때
	

entry point 만들기
	setup.py에서
	
	entry_points={
        	'console_scripts': [

            	'[노드 실행 이름 ex)pub] = [패키지 이름 ex)print_hello].[노드 이름 ex) hello_publisher:main'],
            	'sub = print_hello.hello_subscriber:main'

        	],
    	}
	

ros2 노드 실행
	ros2 run [패키지 이름] [노드 이름]
	ros2 topic echo [토픽 이름 ex) /gps_serial]
	rqt_graph로 node 작동상태 확인 가능

ros2 bag으로 기록
	ros2 bag record [토픽 이름1 ex) /gps_serial] [토픽 이름2].. -o [저장할 파일 이름] [저장할 경로]
	ros2 bag info [bag 파일 이름] 정보확인
	ros2 bag play [bag 파일 이름] topic 발신
	
	
usb 포트 확인
	cd /dev -> ls -> ttyUSB0 확인(아두이노 ttyACM0)
	sudo chmod 777 /dev/ttyUSB0 -> 포트 접근 권한 부여(부팅 시 마다)
	(sudo apt-get update
	sudo apt-get install gtkterm) -> 시리얼 통신 프로그램 'gtkterm' 설치
	gtkterm
	configuration 탭 -> port 에서 장치 연결된 usb 포트 설정

터미널에서 usb 디렉토리 사용
	sudo fdisk -l -> 연결된 모든 disk와 device 보여줌
	mkdir /media/usb ->usb 를 마운트할 디렉토리 생성
	sudo mount /dev/sdd1 /media/usb -> 마운트
	sudo umount /media/usb -> 언마운트
	

파이썬 serial 모듈
	import serial
	ser = serial.Serial(port[usb포트 경로 /dev/usb포트이름/], baud, timeout = 1)
	print(ser.readline().decode())
	
		
custom messge만들기
	workspace 안의 src 디렉토리에서 cmake로 새로운 패키지 생성
	(ros2 pkg create --build-type ament_cmake [패키지명])
	커스텀 메시지 패키지 디렉토리에서 새로운 msg 폴더를 만들어 폴더 내부에서 커스텀 메시지 내용 정의
	(mkdir msg로 디렉토리 생성 후 .msg확장자 파일 만들어 int32, string 등의 c언어 형태 변수 지정)
	cmakelists.txt에서 ament_package() 위에
	
		find_package(rosidl_default_generators REQUIRED)
		rosidl_generate_interfaces(${PROJECT_NAME}
  		"msg/[커스텀 메시지 파일 이름 ex) GpsType].msg"
  		"srv/[커스텀 서비스 파일 이름 ex) custom_srv].srv"
  		)
  	추가
  	custom message의 package.xml에서 <package> 안에
  	
		<depend>geometry_msgs</depend>
		<buildtool_depend>rosidl_default_generators</buildtool_depend>
		<exec_depend>rosidl_default_runtime</exec_depend>
		<member_of_group>rosidl_interface_packages</member_of_group>
		
	추가
	
	colcon build --packages-select [메시지 패키지 이름 ex)gps_cstm_msgs]
	source install/setup.bash
	
	노드 소스코드 package.xml에서
		  <depend>[custom message 패키지 이름]</depend>
	추가
	
vim
	.bashrc 의 맨 아래에  export EDITOR=/usr/bin/vim  추가하여 기본 에디터 gnu nano에서 vim으로 변경
	vim (파일 이름 vim으로 진입)
	cat (파일 이름 vim으로 진입하지 않고 내용만 확인)
	i insert
	esc 명령어 입력 모드로 복귀
	:wq (write, quit)
	
	
	
git 초기화(init) 재설정
	rm -rf .git(기존 local git 경로에서 git 파일 삭제)
	git remote remove origin(github 연결 끊기)
	git status(확인)
	git init(새로 초기화하려는 경로에서)
	git remote add origin [https://github.com/hoboongkim/git_test.git](github 레포지토리 연결)
	git config --global user.name "[hj(이름)]"
	git config --global user.email "[kmhoj9292@naver.com(이메일)]"
	git config --list
	git log
	
	git add [파일 이름] (stage)
	git commit (vim에서 커밋 메시지 입력 후, 버전 생성)
	
	git add remote origin [깃허브 url]
	
	git switch [브랜치명] (현재 브랜치 위치 바꾸기)
	git branch -d [브랜치명] (브랜치 삭제)
	git (명령어) --allow unrelated-histories (local 과 remote 의 기본 브랜치 이름이 달라 브랜치가 두 개 생성될 때)
	git config credential.helper store (push pull 할때 유저명, 비밀번호 저장, 보안위험!)
	
c 
	gcc -v(gcc 버전 확인)
	terminal - configure default build task
	tasks.json 파일 생성 후 편집
	gcc -o "filename" "filename.c" -lm (math.h 함수 사용하기 위해 gcc 컴파일러 설정)
	#pragma pack(push, 정렬크기) (구조체 정렬 설정)
	#pragma pack(pop) (구조체 정렬 설정 해제)
	gcc [파일이름].c -fpack-struct=1 (구조체 정렬 기본설정)
	
	
gcc 터미널 기본 명령어
	gcc -o [출력파일 이름] [디렉토리]/[소스파일 이름] 후 ./[출력파일 이름]
	ex) gcc -o test.exe /home/hj/test.c   입력 후   ./home/hj/test.exe

udp
	socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)
	bind([IP], [PORT])
	recvfrom([buffersize)
	sendto(str.encode([message]), ([IP],[PORT])
	
	recvfrom에서 받은 데이터는 [바이트 메시지, (IP, PORT)] 형태의 리스트
	
